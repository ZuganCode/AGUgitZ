#include <stdio.h>
#include <string.h>
#include <windows.h>

void file(char* input) {
    scanf_s("%s", input, sizeof(input));
}

void create(char* input, int* Verbose) {
    char FileName[50];
    char WhatKindOfFile[4];
    char NextCommand[10];
    scanf_s("%s", FileName, sizeof(FileName));
    scanf_s("%s", WhatKindOfFile, sizeof(WhatKindOfFile));
    if ((strcmp(WhatKindOfFile, "zip") != 0) || strcmp(WhatKindOfFile, "tar") != 0) {
        printf("Недопустимый формат файла! Требуется ввести формат \"zip\" или \"tar\"!\n");
        return;
    }
    scanf_s("%s", NextCommand, sizeof(NextCommand));
    char InCatalog[100];
    if ((strcmp(NextCommand, "--file") == 0) || strcmp(NextCommand, "-f") == 0) {
        file(InCatalog);
    }
    else {
        printf("Неверный аргумент команды, для просмотра команды используйте --help\n");
        return;
    }
    scanf_s("%s", NextCommand, sizeof(NextCommand));
    char OutCatalog[100];
    if ((strcmp(NextCommand, "--output") == 0) || strcmp(NextCommand, "-o") == 0) {
        file(OutCatalog);
    }
    else {
        printf("Неверный аргумент команды, для просмотра команды используйте --help\n");
        return;
    }
    scanf_s("%s", NextCommand, sizeof(NextCommand));
    int Size;
    if ((strcmp(NextCommand, "--size") == 0) || strcmp(NextCommand, "-s") == 0) {
        scanf_s("%d", &Size);
    }
    else {
        printf("Неверный аргумент команды, для просмотра команды используйте --help\n");
        return;
    }
    printf("%s\n", InCatalog);
    printf("%s\n", OutCatalog);
    printf("%d\n", Size);

    /*Сюда нужно добавить функции архивации и создания файла. входные данные для них:
    строка FileName - имя файла
    строка WhatKindOfFile - расширение (zip or tar)
    строка InCatalog - путь к архивируемому файлу
    строка OutCatalog - путь для сохранени архива
    инт Size - процент сжатия */

}

void extract(char* input, int* Verbose) {
    printf("команда 2 выполнена\n");
}

void list(char* input, int* Verbose) {
    printf("команда 3 выполнена\n");
}

void add(char* input, int* Verbose) {
    if (*Verbose == 1)
        printf("Вербоузик робит\n");
    printf("команда 4 выполнена\n");

}

void Delete(char* input, int* Verbose) {
    printf("команда 5 выполнена\n");
}

void help(char* input, int* Verbose) {
    printf("\n--create (-с)\t Команада для архивации файлов, используется по шаблону: [--create имя_создаваемого_файла тип_сжимаемого_файла --file имя_архивируемого_файла --output Путь_для_сохранения_сжатого_файла --size Требуемый_процент Сжатия)");
    printf("\n--extract (-e)\tКоманда для извлечения файлов из архива, используется по шаблону []");
    printf("\n--list (-l)\tКоманда для просмотра содержимого архива, используется по шаблону [--list путь_к_архиву]");

}

const char* commands[] = {
  "-c",
  "--create",
  "-x",
  "--extract",
  "-l",
  "--list",
  "-a",
  "--add",
  "-d",
  "--delete",
  "-h",
  "--help",
  "--exit"
};

void (*actions[10])(char*, int*) = {
  create,
  extract,
  list,
  add,
  Delete,
  help,
};

void executeCommand(char* command, int* exit, int* Verbose) {
    if (strcmp(command, "exit") == 0) { //Если команда выйти, то значение переменной выхода - 1
        *exit = 1;
        return;
    }
    if (strcmp(command, "--verbose") == 0 || strcmp(command, "-v") == 0) { //Если команда verbose, то значение переменной verbose - 1 если уже 1 то измен на 0
        if (*Verbose == 0) {
            *Verbose = 1;
            printf("Функция Verbose включена\n");
        }
        else
        {
            *Verbose = 0;
            printf("Функция Verbose выключена\n");
        }
        return;
    }
    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) { //Любая другая команда проверяется
        if (strcmp(command, commands[i]) == 0) {
            actions[i / 2](command, Verbose);
            return;
        }
    }
    printf("Недопустимая команда, чтобы посмотреть список команд введите --help\n");
}

int main() {
    system("chcp 1251");
    char input[50];
    int exit = 0;
    int Verbose = 0;
    printf("Приветствуем Вас в нашем архиваторе! Чтобы получить информацию о работе в нем введите --help!\n");

    do {
        printf("Введите команду\n");
        scanf_s("%s", input, sizeof(input));
        executeCommand(input, &exit, &Verbose);
    } while (exit != 1);

    return 0;
}
